name: CI/CD Pipeline â€” Build & Deploy to Docker Hub

on:
  push:
    branches:
      - main    # Trigger on pushes to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          IMAGE="gurudattaxd/medical-chatbot"
          TAG_SHA="${{ github.sha }}"
          echo "Building image: $IMAGE:$TAG_SHA"
          docker build -t "$IMAGE:$TAG_SHA" -t "$IMAGE:latest" .

      - name: Push Docker image
        run: |
          IMAGE="gurudattaxd/medical-chatbot"
          TAG_SHA="${{ github.sha }}"
          docker push "$IMAGE:$TAG_SHA"
          docker push "$IMAGE:latest"

      - name: Display pushed image info
        run: echo "Pushed images: gurudattaxd/medical-chatbot:${{ github.sha }} and gurudattaxd/medical-chatbot:latest"

  # Optional deployment step via SSH
  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}           # Your EC2 public IPv4
          username: ubuntu                        # Use ec2-user if your instance uses Amazon Linux
          key: ${{ secrets.EC2_SSH_KEY }}         # Private key (.pem) stored as a secret
          script: |
            IMAGE="gurudattaxd/medical-chatbot:latest"
            echo "Pulling image: $IMAGE"
            docker pull $IMAGE

            echo "Stopping old container (if any)..."
            docker ps -aq --filter "name=app" | xargs -r docker rm -f || true

            echo "Starting new container on port 8080..."
            docker run -d --name app \
              -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e OPENAI_API_BASE="${{ secrets.OPENAI_API_BASE }}" \
              -p 8080:8080 \
              $IMAGE

            echo "Application is now running at http://$HOST:8080"
